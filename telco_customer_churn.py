# -*- coding: utf-8 -*-
"""TELCO_CUSTOMER_CHURN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q55e2NLEpcmrx4jECcSLDE5VM0R-a_wW

# CUSTOMER CHURN PREDICTION PROJECT

## 1. IMPORT LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import joblib

"""## 2. LOAD DATASET"""

df = pd.read_excel('/content/Telco_customer_churn.xlsx')
df.head()

"""## 3. DATA PREPROCESSING"""

df.info()

df.isnull().sum()

"""## 3. DATA CLEANING"""

df.columns = df.columns.str.strip()
df.columns

df[['Total Charges', 'Monthly Charges', 'Churn Reason', 'Churn Label']].dtypes

df[['Total Charges', 'Churn Reason']].isnull().sum()

df.duplicated().sum()

df['Total Charges'] = pd.to_numeric(df['Total Charges'], errors='coerce')
df['Monthly Charges'] = pd.to_numeric(df['Monthly Charges'], errors='coerce')

df['Monthly Charges'].head()

df['Total Charges']   = pd.to_numeric(df['Total Charges'],   errors='coerce')
df['Monthly Charges'] = pd.to_numeric(df['Monthly Charges'], errors='coerce')
print("Tipe data:", df[['Total Charges', 'Monthly Charges']].dtypes)
print("Missing numeric:", df[['Total Charges', 'Monthly Charges']].isnull().sum())

df['Churn Label'] = df['Churn Label'].astype('category')
print("Dtype Churn Label:", df['Churn Label'].dtype)

"""## 4. EXPLORATORY DATA ANALYSIS"""

plt.figure(figsize=(20,8))
sns.countplot(x='Churn Reason', hue='Churn Reason', data=df, palette='Set2', legend=False)
plt.title('Distribusi Churn Pelanggan')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(6,4))
sns.countplot(x='Churn Label', hue='Churn Label', data=df, palette='Set2', legend=False)
plt.title('Distribusi Churn Pelanggan')
plt.xlabel('Churn (Yes = 1, No = 0)')
plt.ylabel('Jumlah Pelanggan')
plt.show()

plt.figure(figsize=(8,6))
sns.histplot(df['Tenure Months'], kde=True, color='teal', bins=30)
plt.title('Distribusi Lama Berlangganan (Tenure)')
plt.xlabel('Tenure (Bulan)')
plt.ylabel('Jumlah Pelanggan')
plt.show()

plt.figure(figsize=(8, 6))
ax = sns.boxplot(
    x='Churn Label',
    y='Monthly Charges',
    hue='Churn Label',
    data=df,
    dodge=False,
    palette='Set2')

plt.title('Monthly Charges berdasarkan Status Churn')
plt.xlabel('Churn (Yes = 1, No = 0)')
plt.ylabel('Monthly Charges ($)')
plt.show()

"""## 5. DATA PREPROCESSING"""

drop_cols = [
    'CustomerID', 'Count', 'Lat Long', 'Churn Reason', 'Churn Label'
]
df_model = df.drop(columns=drop_cols)

X = df_model.drop(columns=['Churn Value'])
y = df_model['Churn Value']

cat_cols = X.select_dtypes(include='object').columns
le = LabelEncoder()
for col in cat_cols:
    X[col] = le.fit_transform(X[col])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
print(X_train)
print(X_test)

"""## 6. MODEL BUILDING"""

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

print(classification_report(y_test, y_pred_rf))
print("Accuracy RF:", accuracy_score(y_test, y_pred_rf))

xgb = XGBClassifier(eval_metric='logloss', random_state=42)
xgb.fit(X_train, y_train)
y_pred_xgb = xgb.predict(X_test)

print(classification_report(y_test, y_pred_xgb))
print("Accuracy XGB:", accuracy_score(y_test, y_pred_xgb))

"""## 7. FEATURE IMPORTANCE"""

feat_imp = pd.DataFrame({
    'feature': X.columns,
    'importance': rf.feature_importances_
}).sort_values('importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(
    data=feat_imp,
    x='importance',
    y='feature',
    hue='feature',
    dodge=False,
    legend=False,
    palette='coolwarm'
)

plt.title('Feature Importance - Random Forest')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()

"""## 8. CONFUSION MATRIX PLOT"""

def plot_confusion_matrix(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix - {title}')
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.show()

plot_confusion_matrix(y_test, y_pred_rf, 'Random Forest')

plot_confusion_matrix(y_test, y_pred_xgb, 'XGBoost')

"""## 9. SAVE MODEL"""

joblib.dump(rf, 'random_forest_model.pkl')
print("Model Random Forest telah disimpan")

loaded_rf = joblib.load('random_forest_model.pkl')
print("Model Random Forest berhasil dimuat")

y_pred_loaded_rf = loaded_rf.predict(X_test)
print("Accuracy setelah memuat model:", accuracy_score(y_test, y_pred_loaded_rf))